{
  "name": "clean",
  "version": "4.0.1",
  "description": "clean parses and sanitize argv for node, supporting fully extendable types, shorthands, validatiors and setters.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec ./test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:kaelzhang/node-clean.git"
  },
  "keywords": [
    "argv",
    "parser",
    "argument-vector",
    "cleaner",
    "simple"
  ],
  "author": {
    "name": "Kael"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kaelzhang/node-clean/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "minimist": "^1.1.0",
    "mix2": "^1.0.0",
    "skema": "^1.0.0"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "chai": "~1.8.0"
  },
  "readme": "# clean [![NPM version](https://badge.fury.io/js/clean.png)](http://badge.fury.io/js/clean) [![Build Status](https://travis-ci.org/kaelzhang/node-clean.png?branch=master)](https://travis-ci.org/kaelzhang/node-clean) [![Dependency Status](https://gemnasium.com/kaelzhang/node-clean.png)](https://gemnasium.com/kaelzhang/node-clean)\n\nClean is small but powerful node.js module that parses and sanitize argv for node, supporting:\n\n- fully extendable types\n- shorthands\n- validatiors\n- setters\n\n# Installation and Usage\n\n```sh\nnpm install clean --save\n```\n\n```js\nvar clean = require('clean');\n```\n\n# Usage: clean(options)\n\n## Argv Shorthands\n\nWe can define shorthands with the option `options.shorthands`.\n\n```js\nvar shorthands = {\n\tc: 'cwd',\n\tn: 'no-recursive'\n};\n\nclean({\n\tshorthands: shorthands\n}).argv(['node', 'xxx', '-c', 'abc', '-n']);\n// The result is:\n// {\n//\t\tcwd: 'abc',\n//\t\trecursive: false\n// }\n```\n\n## Types\n\n```js\nclean({\n\tschema: {\n\t\tcwd: {\n\t\t\ttype: require('path')\n\t\t},\n\t\t\n\t\tretry: {\n\t\t\ttype: Boolean\n\t\t}\n\t}\n}).parse(\n\t['node', 'xxx', '--cwd', 'abc', '--retry', 'false'], \n\tfunction(err, results){\n\t\tconsole.log(results.cwd); // the `path.resolved()`d 'abc'\n\t\tconsole.log(results.retry === false); // is a boolean, not a string\n\t}\n);\n```\n\n## Validators and Setters\n\nValidators and setters of `clean` is implemented by `[checker](https://github.com/kaelzhang/node-checker)`, check the apis of `checker` for details.\n\nYou could check out the demo located at \"example/clean.js\". That is a very complicated situation of usage.\n\n```sh\nnode example/clean.js --username guest\n```\n\n\n# Programatical Details\n\n## constructor: clean(options)\n\n- options `Object=`\n  - schema `Object` schema to define the argv\n  - offset `Number=` The offset from which the parser should start to parse. Optional. Default to `2`.\n  - shorthands `Object=` The schema used to clean the given object or the parsred argv\n  - parallel `Boolean=false` whether should check the argv in parallel, default to `false`\n\n## options.schema\n\n```js\nname: {\n  // If `required == true` and `--name` is not specified in argv, there will be an error\n  required: true,\n  validate: function(value){\n    return /[a-z]/i.test(value);\n  },\n  set: function(value){\n    return value.replace(/^[a-z]/, function(m){\n      return m.toUpperCase();\n    });\n  }\n}\n```\n\n- required `Boolean` \n- default `*` if `required` is `true`, this property will be ignored.\n- validate `function(v, is_default)|Array` function for validation, or array of functions\n- set `function(v, is_default)|Array` setter function, or array of functions.\n\nThere are three methods available for `this` object of validator and setter.\n\n- `this.async()` returns function `done`, and turns the current validator or setter into an asynchronous method. We can also use `done` to define better error messages.\n- `this.get(key)` could fetch the value of other properties.\n- `this.set(key, value)` could set values of other properties.\n\n## .argv(argv)\n\n- argv `Array` `process.argv` or something like that.\n\nParses the argument vector, without cleaning the data.\n\nReturns `Object` The parsed object with shorthand rules applied.\n\n## .clean(data, callback)\n\n- data `Object` The given data.\n- callback `function(err, results)`\n\nCleans the given data according to the `schema`.\n\n## .parse(argv, callback)\n\nParses argument vector (argv) or something like `process.argv`, and cleans the parsed data according to the `schema`.\n\nThis method is equivalent to `c.clean(c.argv(argv), callback)`.\n\n# Advanced Section\n\n## .registerType(type, typeDef)\n\nRegisters a custom type.\n\n",
  "homepage": "https://github.com/kaelzhang/node-clean",
  "_id": "clean@4.0.1",
  "dist": {
    "shasum": "2aa345294d9117ab8f8006c468884af7627f8473"
  },
  "_from": "clean@",
  "_resolved": "https://registry.npmjs.org/clean/-/clean-4.0.1.tgz"
}
