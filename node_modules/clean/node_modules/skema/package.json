{
  "name": "skema",
  "version": "1.0.2",
  "description": "Skema is the collection of common abstract methods for validatiors and setters.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --reporter spec ./test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kaelzhang/node-skema.git"
  },
  "keywords": [
    "skema",
    "schema",
    "validator",
    "validate",
    "setter"
  ],
  "author": {
    "name": "kael"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kaelzhang/node-skema/issues"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "chai": "~1.8.0"
  },
  "dependencies": {
    "async": "^0.9.0",
    "make-array": "^0.1.2",
    "mix2": "^1.0.0"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/skema.png)](http://badge.fury.io/js/skema)\n[![Build Status](https://travis-ci.org/kaelzhang/node-skema.png?branch=master)](https://travis-ci.org/kaelzhang/node-skema)\n[![Dependency Status](https://gemnasium.com/kaelzhang/node-skema.png)](https://gemnasium.com/kaelzhang/node-skema)\n\n# skema\n\nSkema is common abstract node.js methods for validatiors and setters.\n\t\n# Usage\n```sh\nnpm install skema --save\n```\n\n## skema(options)\n\n```js\nvar skema = require('skema');\nvar s = skema({\n  rule: {\n    validate: function(v){\n      var done = this.async();\n      remoteChecking(v, function(err){\n        done(err);\n      });\n    },\n    set: function(v){\n      return v + 1;\n    },\n    get: function(v){\n      return v - 1;\n    }\n  }\n});\ns.validate(1, function(err){\n  console.log(err);\n});\ns.set(1, function(err, v){\n  console.log(v); // 2\n  s.get(v, function(err){\n    console.log(v); // 1\n  });\n});\n```\n\n## options.rule\n\n- validate: `function(v)|RegExp|Array` Could be an validate function, or a regular expression, or an array of them.\n- set: `function(v)|Array.<function(v)>` \n- get: `function(v)|Array.<function(v)>`\n\nThe `this` object of each of `rule.validate`, `rule.set` and `rule.get` has a method called `async`, we can use:\n\n```js\nvar done = this.async();\n```\n\nto turn the either one of the tree into an async method, as well as the familiar way of node.js.\n\n## .validate(value, [args], callback)\n\n- value\n- args `Array=` Extra arguments that will be passed into `rule.validate` for extension.\n- callback `function(err)`\n\n## .set(value, [args], callback)\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kaelzhang/node-skema",
  "_id": "skema@1.0.2",
  "dist": {
    "shasum": "08b2bbc9c4fe1503da81616173e896d69f3867b1"
  },
  "_from": "skema@^1.0.0",
  "_resolved": "https://registry.npmjs.org/skema/-/skema-1.0.2.tgz"
}
